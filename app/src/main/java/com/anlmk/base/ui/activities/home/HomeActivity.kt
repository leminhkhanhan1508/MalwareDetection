package com.anlmk.base.ui.activities.home

import android.content.Intent
import android.util.Log
import androidx.recyclerview.widget.LinearLayoutManager
import com.anlmk.base.data.`object`.CommonEntity
import com.anlmk.base.databinding.ActivityHomeBinding
import com.anlmk.base.ui.activities.login.ScanInstalledAppActivity
import com.anlmk.base.ui.adapters.CommonAdapter
import com.anlmk.base.ui.base.BaseActivity
import com.anlmk.base.utils.Tags
import com.google.android.gms.ads.*
import org.koin.android.viewmodel.ext.android.viewModel

class HomeActivity : BaseActivity() {
    override val model: HomeViewModel by viewModel()
    override val binding by lazy {
        ActivityHomeBinding.inflate(layoutInflater)
    }
    private var adapterServiceHome: CommonAdapter? = null

    companion object {
        const val HOME_ALL_APP = "1"
        const val HOME_UNSAFE_APP = "2"
        const val HOME_SAFE_APP = "3"
        const val HOME_UNKNOWN_APP = "4"
    }


    override fun initView() {
        super.initView()
        setAdapterServiceHome()
        settingAdsGoogle()
    }

    private fun settingAdsGoogle() {
        if (model.isNetworkAvailable(this)) {
            MobileAds.initialize(this){}
            val testDeviceIds = listOf("BCB73E59861F503F4E069B2465FC785E")
            val configuration = RequestConfiguration.Builder().setTestDeviceIds(testDeviceIds).build()
            MobileAds.setRequestConfiguration(configuration)
            MobileAds.initialize(this) {}
            val adRequest = AdRequest.Builder().build()
            binding.adView.loadAd(adRequest)
            binding.adView.adListener = object : AdListener() {
                override fun onAdClicked() {
                    Log.wtf("KHANHANDEBUG", "onAdClicked")
                    // Code to be executed when the user clicks on an ad.
                }

                override fun onAdClosed() {
                    Log.wtf("KHANHANDEBUG", "onAdClosed")
                    // Code to be executed when the user is about to return
                    // to the app after tapping on an ad.
                }

                override fun onAdFailedToLoad(adError: LoadAdError) {
                    // Gets the domain from which the error came.
                    // Gets the domain from which the error came.
                    val errorDomain: String = adError.getDomain()
                    // Gets the error code. See
                    // https://developers.google.com/android/reference/com/google/android/gms/ads/AdRequest#constant-summary
                    // for a list of possible codes.
                    // Gets the error code. See
                    // https://developers.google.com/android/reference/com/google/android/gms/ads/AdRequest#constant-summary
                    // for a list of possible codes.
                    val errorCode: Int = adError.code
                    // Gets an error message.
                    // For example "Account not approved yet". See
                    // https://support.google.com/admob/answer/9905175 for explanations of
                    // common errors.
                    // Gets an error message.
                    // For example "Account not approved yet". See
                    // https://support.google.com/admob/answer/9905175 for explanations of
                    // common errors.
                    val errorMessage: String = adError.message
                    // Gets additional response information about the request. See
                    // https://developers.google.com/admob/android/response-info for more
                    // information.
                    // Gets additional response information about the request. See
                    // https://developers.google.com/admob/android/response-info for more
                    // information.
                    val responseInfo: ResponseInfo? = adError.responseInfo

                    // Gets the cause of the error, if available.
                    // Gets the cause of the error, if available.
                    val cause: AdError? = adError.cause
                    // All of this information is available via the error's toString() method.
                    // All of this information is available via the error's toString() method.
                    Log.d("KHANHANDEBUG-Ads", adError.toString())
                    Log.wtf(
                        "KHANHANDEBUG",
                        "onAdFailedToLoad-${errorCode}-${errorMessage}-${responseInfo}"
                    )
                    // Code to be executed when an ad request fails.
                }

                override fun onAdImpression() {
                    Log.wtf("KHANHANDEBUG", "onAdImpression")
                    // Code to be executed when an impression is recorded
                    // for an ad.
                }

                override fun onAdLoaded() {
                    Log.wtf("KHANHANDEBUG", "onAdLoaded")
                    // Code to be executed when an ad finishes loading.
                }

                override fun onAdOpened() {
                    Log.wtf("KHANHANDEBUG", "onAdOpened")
                    // Code to be executed when an ad opens an overlay that
                    // covers the screen.
                }
            }
        }else{
            confirm.newBuild().setNotice("")
        }
    }

    override fun onListener() {
        super.onListener()
        adapterServiceHome?.onClick = {
            if (it is CommonEntity) {
                handleActionNext(it.codeFunction)
            }
        }
    }

    private fun handleActionNext(codeFunction: String?) {
        val intent = Intent(this, ScanInstalledAppActivity::class.java)
        intent.putExtra(Tags.CODE_FUNCTION, codeFunction)
        startActivity(intent)
    }


    private fun setAdapterServiceHome() {
        adapterServiceHome = CommonAdapter()
        val layoutManagerNormal = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)
        binding.rcvHomeServiceFunction.layoutManager = layoutManagerNormal
        binding.rcvHomeServiceFunction.adapter = adapterServiceHome
        adapterServiceHome?.updateData(model.getHomeServiceFunction())

    }


}